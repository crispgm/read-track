<div class="section">
  <h2 id="Bookmarklet">Bookmarklet</h2>
  <blockquote>
    You may add the following bookmarklet to your browser. Chrome and Brave are
    tested. This is based on
    <a
      href="https://gist.github.com/codemicro/f7d4d4b687c3ec2e7186ef7efecfcc35"
      target="_blank"
      >https://gist.github.com/codemicro/f7d4d4b687c3ec2e7186ef7efecfcc35</a
    >.
  </blockquote>
  <div clas="input-area">
    <div class="input-item">
      <div class="input-title">Read Type</div>
      <select id="read-type" onchange="onSelectReadType()">
        <option value="read">Read</option>
        <option value="skim">Skim</option>
        <option value="skip">Skip</option>
        <option value="unread">Unread</option>
      </select>
    </div>
    <div class="input-item">
      <div class="input-title">Device</div>
      <input type="text" id="device-name" onchange="onChangeDevice()" />
    </div>
    <div class="input-item">
      <div class="input-title">HTTPS</div>
      <input type="checkbox" checked onclick="onClickHTTPS(this)" />
    </div>
    <p>
      <button onclick="onClickCopy()">Copy to Clipboard</button>
      <span id="copy-result"></span>
    </p>
  </div>
  <pre class="highlight bookmarklet"><code class="hljs">loading...</code></pre>
</div>
<div class="section">
  <h2 id="iOS">iOS</h2>
  <ol>
    <li>
      <a
        href="https://www.icloud.com/shortcuts/c3f9ca3719a8443ca512b10b11b4b875"
        target="_blank"
      >
        Download the template of ReadTrack shortcut </a
      >.
    </li>
    <li>
      Clone the shortcut and use as your private one, because it needs private
      access token.
    </li>
    <li>
      Setup <code>token</code>, <code>hostname</code> and
      <code>deviceName</code>.
    </li>
  </ol>
</div>
<div class="section">
  <h2 id="Android">Android</h2>
  <p>
    It is not supported yet because I don't really have an Android device. If
    you want to use Read Track on Android, please feel free to contribute.
  </p>
</div>
<script>
const token = "{{ token }}";
const hostname = "{{ hostname }}";
let readType = "read";
let deviceName = "";
let isHTTPS = true;
setCode(token, hostname, readType, deviceName, isHTTPS);

function onSelectReadType() {
  readType = document.getElementById("read-type").value;
  setCode(token, hostname, readType, deviceName, isHTTPS);
}

function onClickHTTPS(cb) {
  if (cb.checked == isHTTPS) {
    return
  }
  isHTTPS = cb.checked;
  setCode(token, hostname, readType, deviceName, isHTTPS);
}

function onChangeDevice() {
  deviceName = document.getElementById("device-name").value;
  setCode(token, hostname, readType, deviceName, isHTTPS);
}

function onClickCopy() {
  let bookmarklet = getBookmarklet(token, hostname, readType, deviceName, isHTTPS);
  navigator.clipboard.writeText(bookmarklet);
  document.getElementById("copy-result").innerHTML = "Copied to clipboard. You may paste it to your bookmarklet."
  setTimeout(() => {
    document.getElementById("copy-result").innerHTML = "";
  }, "2500")
}

function setCode(token, hostname, readType, deviceName, isHTTPS) {
  let bookmarklet = getBookmarklet(token, hostname, readType, deviceName, isHTTPS);
  const codeElement = document.getElementsByTagName('code')[0];
  codeElement.innerHTML = bookmarklet;
  hljs.highlightAll()
}

function getBookmarklet(token, hostname, readType, deviceName, isHTTPS) {
  let hostWithProto = "https://" + hostname;
  if (!isHTTPS) {
    hostWithProto = "http://" + hostname;
  }
  return `javascript:(() => {
  const token = "${token}";
  const readType = "${readType}";
  const deviceName = "${deviceName}";
  const requestURL = "${hostWithProto}/api/add";

  const pageTitle = document.title;
  const pageURL = window.location.href;
  let metaAuthor = "";
  let metaDescription = "";

  function getMetaValue(propName) {
    const x = document.getElementsByTagName("meta");
    for (let i = 0; i < x.length; i++) {
      const y = x[i];

      let metaName;
      if (y.attributes.property !== undefined) {
        metaName = y.attributes.property.value;
      }
      if (y.attributes.name !== undefined) {
        metaName = y.attributes.name.value;
      }

      if (metaName === undefined) {
        continue;
      }

      if (metaName === propName) {
        return y.attributes.content.value;
      }
    }
    return undefined;
  }

  {
    const author = getMetaValue("author");
    if (author !== undefined) {
      metaAuthor = author;
    }
  }

  {
    let desc = getMetaValue("og:description");
    if (desc !== undefined) {
      metaDescription = desc;
    } else {
      desc = getMetaValue("description");
      if (desc !== undefined) {
        metaDescription = desc;
      }
    }
  }

  const url = new URL(requestURL);
  const searchParams = url.searchParams;
  searchParams.set("title", pageTitle);
  searchParams.set("url", pageURL);
  searchParams.set("author", metaAuthor);
  searchParams.set("description", metaDescription);
  searchParams.set("type", readType);
  searchParams.set("device", deviceName);
  searchParams.set("token", token);

  window.location.href = url;
})();`;
}
</script>
